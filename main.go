package main

import (
	"bytes"
	"log"
	"os"
	"os/exec"
	"path"
	"path/filepath"
	"strings"

	"encoding/json"
	"time"

	"github.com/rwcarlsen/goexif/exif"
)

// FileFormat is the format to rename the photos to.
const FileFormat = "2006-01-02 15.04.05"

// FfProbeDateFormat is the format that is used to parse the DateTime from `ffprobe`
const FfProbeDateFormat = "2006-01-02 15:04:05"

var destDir = "/Users/klauer/dev/go/src/github.com/klauern/photos-renamer/outfiles/"
var srcDir = "/Users/klauer/dev/go/src/github.com/klauern/photos-renamer/files/"

// MediaType is the type of file it is
type MediaType int

const (
	photo MediaType = iota
	movie
	noneOfTheAbove
)

// FfProbeFormat provides the struct that is used with the `ffprobe` command.  it's use can be generated by the following command:
// `ffprobe -v quiet -print_format json -show_format <filename>`
type FfProbeFormat struct {
	Format struct {
		Filename       string `json:"filename"`
		NbStreams      int    `json:"nb_streams"`
		NbPrograms     int    `json:"nb_programs"`
		FormatName     string `json:"format_name"`
		FormatLongName string `json:"format_long_name"`
		StartTime      string `json:"start_time"`
		Duration       string `json:"duration"`
		Size           string `json:"size"`
		BitRate        string `json:"bit_rate"`
		ProbeScore     int    `json:"probe_score"`
		Tags           struct {
			Encoder      string `json:"encoder"`
			Marker       string `json:"marker"`
			Maker        string `json:"maker"`
			Model        string `json:"model"`
			CreationTime string `json:"creation_time"`
		} `json:"tags"`
	} `json:"format"`
}

func getType(name string) MediaType {
	log.Printf("extension: %s\n", path.Ext(name))
	ext := strings.ToLower(path.Ext(name))
	switch ext {
	case ".jpg", ".jpeg":
		log.Println("Is a JPG")
		return photo
	case ".png":
		log.Println("Is a PNG")
		return photo
	case ".mov", ".avi":
		return movie
	default:
		return noneOfTheAbove
	}
}

func renameDateTime(p string) error {
	f, err := os.Open(p)
	if err != nil {
		log.Printf("Error opening file for reading: %v\n", err)
		return err
	}
	x, err := exif.Decode(f)
	if err != nil {
		log.Printf("Error Decoding file: %v\n", err)
		return err
	}
	dt, err := x.DateTime()
	if err != nil {
		log.Printf("Cannot get DateTime for file: %v\n", err)
		return err
	}
	err = renameWithDate(p, dt)
	if err != nil {
		return err
	}
	return nil
}

func renameWithDate(p string, dt time.Time) error {
	name := dt.Format(FileFormat) + path.Ext(p)
	err := os.Rename(p, destDir+name)
	if err != nil {
		log.Printf("Error renaming file: %v\n", err)
		return err
	}
	return nil
}

func renameMovieDate(path string) error {
	cmd := exec.Command("ffprobe", "-v", "quiet", "-print_format", "json", "-show_format", path)
	var out bytes.Buffer
	cmd.Stdout = &out
	err := cmd.Run()
	if err != nil {
		return err
	}
	probeInfo := &FfProbeFormat{}
	err = json.Unmarshal(out.Bytes(), &probeInfo)
	if err != nil {
		return err
	}
	t, err := time.Parse(FfProbeDateFormat, probeInfo.Format.Tags.CreationTime)
	if err != nil {
		return err
	}
	err = renameWithDate(path, t)
	if err != nil {
		return err
	}

	return nil
}

func renameWithExif(path string, info os.FileInfo, err error) error {
	log.Printf("Processing %s with file %s\n", path, info.Name())
	if info.IsDir() {
		log.Println("Is directory, not file")
		return nil
	}
	switch getType(info.Name()) {
	case photo:
		log.Printf("Is a file, with a photo suffix: %v\n", info.Name())
		err := renameDateTime(path)
		if err != nil {
			log.Println(err)
			return nil
		}
	case movie:
		err := renameMovieDate(path)
		if err != nil {
			log.Println(err)
		}
		return nil
	default:
		return nil
	}
	return nil
}

func main() {
	err := filepath.Walk(srcDir, renameWithExif)
	if err != nil {
		log.Fatal(err)
	}
}
